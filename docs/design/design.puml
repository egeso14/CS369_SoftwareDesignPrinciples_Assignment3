@startuml

package presentation{
+class Main{
+{static} main(args: String[]): void
-setup(): void
}
+class GameView{
~displayBoard(): void
~displayEndScreen(): void
}
+class GameController{
-gameState: GameState
-board: Board
-currentTurn: Player
-otherPlayer: Player
+Game()
-setup(): void
-runGameLoop(): void
-switchPlayerTurn(): void
-detectAndHandleSelectPiece(): void
-detectAndHandleSelectDestination(): void
-choosePlayMode(): void
-chooseAIAlgorithm(): void
}

+class StatisticsView
{
    +DisplayName(name: String):void
    +DisplayData(data: List<String>): void
}

+class StatisticsController
{
    +StatisticsController(model: StatisticManager)
    +StatisticsController(color: Color, model: StatisticManager)
    -model: StatisticManager
    -view: StatisticsView
    +UpdateView(): void
}

}

package domain{
+enum GameState{
WHITE_TURN
BLACK_TURN
WHITE_WIN
BLACK_WIN
DRAW
}

+class Player
{
 -isAI: boolean
 -algorithm: Algorithm
 -myColor: Color
 +Player()
 +Player(algorithm: Algorithm)
 +GetIsAI():boolean
 +GetNextMoveAI():
}

+class Algorithm
{
    -board: Board
    -implementation: AlgorithmImplementation
    +Algorithm(implementation: AlgorithmImplementation)
    +GetMove(color: Color): Pair<Piece, Piece>
}
+interface AlgorithmImplementation
{
    +GetMove(board: Board, color:Color)
}


+class StatisticManager
{
    -blackStatistics: List<Statistic>
    -whiteStatistics: List<Statistic>
    +GetStatisticData(Color): List<Pair<String, List<String>>
    +Update(event: Event, color:Color)
    -BroadcastToBlack(event: Event)
    -BroadcastToWhite(event: Event)
}

StatisticManager -->"*"Statistic
StatisticManager ..> Color
StatisticManager ..> Event

~interface Statistic
{
    +Update(event: Event): void
    +GetStatisticName(): String
    +GetData(): List<String>
}
Statistic ..> Event

+class MoveHistoryStatistic
{
    +Update(event: Event)
    +GetStatisticName(): List<String>
    +GetData(): List<String>
    -movesInOrder: List<Event>
}
MoveHistoryStatistic ..|> Statistic

+class NumberOfMovesStatistic
{
    -counter: Int
    +Update(event: Event)
    +GetStatisticName(): List<String>
    +GetData(): List<String>
    +GetNumberOfMovesData()
}
NumberOfMovesStatistic ..|> Statistic

+class NumberOfMovesPerTypeStatistic
{
    -numPawnMoves: Int
    -numRookMoves: Int
    -numBishopMoves: Int
    -numQueenMoves: Int
    -numKnightMoves: Int
    -numKingMoves: Int
    +GetStatisticName(): List<String>
    +GetData(): List<String>
    +Update(event: Event)
}
NumberOfMovesPerTypeStatistic ..|> Statistic
NumberOfMovesPerTypeStatistic ..> Piece
NumberOfMovesPerTypeStatistic ..> Type

+class Event
{
    +Event(from: Square, to: Square, moving: Piece, other: piece, outcome: Outcome)
    +{static} Serialize(): String
    +from: Square
    +to: Square
    +moving: Piece
    +other: Piece
    +outcome: Outcome
}
Event --> Square
Event --> Piece
Event --> Outcome

+enum Outcome
{
    None,
    Eliminate
}

+class Board{
-board: Piece[][]
-currentPlayer: Color
+Board()
+movePiece(from: Square, to: Square): boolean
-isMoveValid(from: Square, to: Square): boolean
-isSameColor(from: Square, to: Square): boolean
-hasNoObstacle(from: Square, to: Square): boolean
-checkNotMoveIntoCheck(from: Square, to: Square): boolean
-sendEvent(): void
+switchTurn(): void
+isGameOver(): boolean
}
Board --> StatisticManager
Board ..> Event
note left of Board::hasNoObstacle
Check whether the piece can jump.
If no, check whether there is any piece
(obstacle) on the way.
end note
+abstract class Piece{
-color: Color
-currentLocation: Square
-type: Type
#canJump: boolean
+Piece(c: Color, t: Type)
+isSameColor(p: Piece): boolean
+isSameColor(c: Color): boolean
+canJump(): boolean
+toString(): String
+{abstract} isValidShape(to: Square): boolean
}
+class Pawn{
+isValidShape(to: Square): boolean
}
+class Queen{
+isValidShape(to: Square): boolean
}
+class King{
-inCheck: boolean
+King(c: Color, t: Type)
+isValidShape(to: Square): boolean


+checkCheck(boardData: Piece[][]): boolean
+isInCheckMate(boardData: Piece[][]): boolean
+updateInCheck(boardData: Piece[][]): boolean
+isInCheck(): boolean
}
+class Rook{
+isValidShape(to: Square): boolean
}
+class Bishop{
+isValidShape(to: Square): boolean
}
+class Knight{
+Knight(c: Color, t: Type)
+isValidShape(to: Square): boolean
}
+enum Color{
BLACK,
WHITE
}
+enum Type{
KING,
QUEEN,
PAWN,
KNIGHT,
BISHOP,
ROOK
}
+class Square{
-rank: int
-file: int
+Square(int, int)
+getRank(): int
+getFile(): int
}
}
Main ..> GameView
Main ..> GameController
GameController -u-> GameView
GameController --> "2" Player
GameController --> Board
GameController --> GameState
GameController ..> Algorithm
GameController ..> AlgorithmImplementation
GameController..>StatisticsController

StatisticsController-->StatisticManager
StatisticsController-->StatisticsView
StatisticsController..> Color

Player --> Color
AlgorithmImplementation ..> Color
Algorithm .l.> Color
Algorithm -r-> AlgorithmImplementation
Algorithm ..> Piece
Algorithm ..> Square
Player --> Algorithm
Board ..> Square
Board -r-> "*" Piece
Board ..> Color
Board ..> Type
Board ..> King
Piece --> "1" Color
Piece --> "1" Type
Piece --> "1" Square
King -u-|> Piece
Queen -u-|> Piece
Pawn -u-|> Piece
Rook -u-|> Piece
Bishop -u-|> Piece
Knight -u-|> Piece


@enduml
